#ifndef _INC_MESSAGES_H
#define _INC_MESSAGES_H
/*
Code automatically generated by asn1scc tool
*/
#include "asn1crt.h"

#ifdef  __cplusplus
extern "C" {
#endif



typedef struct {    int nCount; 
    
    byte arr[256];
} OutputType_result;

#define OutputType_result_REQUIRED_BYTES_FOR_ENCODING       257 
#define OutputType_result_REQUIRED_BITS_FOR_ENCODING        2056
#define OutputType_result_REQUIRED_BYTES_FOR_ACN_ENCODING   257 
#define OutputType_result_REQUIRED_BITS_FOR_ACN_ENCODING    2056
#define OutputType_result_REQUIRED_BYTES_FOR_XER_ENCODING   551

void OutputType_result_Initialize(OutputType_result* pVal);
flag OutputType_result_IsConstraintValid(const OutputType_result* val, int* pErrCode);
#ifndef ERR_OutputType_result 
#define ERR_OutputType_result		1001  /*(SIZE(1 .. 256))*/
#endif

typedef struct {    int nCount; 
    
    byte arr[256];
} OutputType_command;

#define OutputType_command_REQUIRED_BYTES_FOR_ENCODING       257 
#define OutputType_command_REQUIRED_BITS_FOR_ENCODING        2056
#define OutputType_command_REQUIRED_BYTES_FOR_ACN_ENCODING   257 
#define OutputType_command_REQUIRED_BITS_FOR_ACN_ENCODING    2056
#define OutputType_command_REQUIRED_BYTES_FOR_XER_ENCODING   553

void OutputType_command_Initialize(OutputType_command* pVal);
flag OutputType_command_IsConstraintValid(const OutputType_command* val, int* pErrCode);
#ifndef ERR_OutputType_command 
#define ERR_OutputType_command		1002  /*(SIZE(1 .. 256))*/
#endif

typedef struct {
    asn1SccSint invokeid;
    OutputType_command command;
    OutputType_result result;
} OutputType;

#define OutputType_REQUIRED_BYTES_FOR_ENCODING       523 
#define OutputType_REQUIRED_BITS_FOR_ENCODING        4184
#define OutputType_REQUIRED_BYTES_FOR_ACN_ENCODING   523 
#define OutputType_REQUIRED_BITS_FOR_ACN_ENCODING    4184
#define OutputType_REQUIRED_BYTES_FOR_XER_ENCODING   1126

void OutputType_Initialize(OutputType* pVal);
flag OutputType_IsConstraintValid(const OutputType* val, int* pErrCode);


typedef struct {    int nCount; 
    
    byte arr[256];
} InputType_command;

#define InputType_command_REQUIRED_BYTES_FOR_ENCODING       257 
#define InputType_command_REQUIRED_BITS_FOR_ENCODING        2056
#define InputType_command_REQUIRED_BYTES_FOR_ACN_ENCODING   257 
#define InputType_command_REQUIRED_BITS_FOR_ACN_ENCODING    2056
#define InputType_command_REQUIRED_BYTES_FOR_XER_ENCODING   551

void InputType_command_Initialize(InputType_command* pVal);
flag InputType_command_IsConstraintValid(const InputType_command* val, int* pErrCode);
#ifndef ERR_InputType_command 
#define ERR_InputType_command		1003  /*(SIZE(1 .. 256))*/
#endif

typedef struct {
    asn1SccSint invokeid;
    InputType_command command;
} InputType;

#define InputType_REQUIRED_BYTES_FOR_ENCODING       266 
#define InputType_REQUIRED_BITS_FOR_ENCODING        2128
#define InputType_REQUIRED_BYTES_FOR_ACN_ENCODING   266 
#define InputType_REQUIRED_BITS_FOR_ACN_ENCODING    2128
#define InputType_REQUIRED_BYTES_FOR_XER_ENCODING   595

void InputType_Initialize(InputType* pVal);
flag InputType_IsConstraintValid(const InputType* val, int* pErrCode);


 

/* ================= Encoding/Decoding function prototypes =================
 * These functions are placed at the end of the file to make sure all types
 * have been declared first, in case of parameterized ACN encodings
 * ========================================================================= */

flag OutputType_result_Encode(const OutputType_result* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag OutputType_result_Decode(OutputType_result* pVal, BitStream* pBitStrm, int* pErrCode);
flag OutputType_command_Encode(const OutputType_command* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag OutputType_command_Decode(OutputType_command* pVal, BitStream* pBitStrm, int* pErrCode);
flag OutputType_Encode(const OutputType* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag OutputType_Decode(OutputType* pVal, BitStream* pBitStrm, int* pErrCode);
flag InputType_command_Encode(const InputType_command* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag InputType_command_Decode(InputType_command* pVal, BitStream* pBitStrm, int* pErrCode);
flag InputType_Encode(const InputType* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag InputType_Decode(InputType* pVal, BitStream* pBitStrm, int* pErrCode); 


#ifdef  __cplusplus
}

#endif

#endif
